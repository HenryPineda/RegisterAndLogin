Part 0

Install xampp

The version used for this repository is 

xampp version 1.7.5 with php version 5.3.8

installer

xampp-win32-1.7.5-VC9-installer

Link of the installer

https://sourceforge.net/projects/xampp/files/XAMPP%20Windows/1.7.5/




******************************************************************************

Part 1 

Introduction to the project

Creating the repository in github

1. Login into github

2. Click create new repository

3. Give the repository a name

4. Open git in windows

5. Cd into the folder where the code is located

6. execute the following commands

git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/HenryPineda/RegisterAndLogin.git
git push -u origin master


**********************************************************************************


Part 2


How to export the database from phpAdmin

https://www.youtube.com/watch?v=ffmCGVse8yg

1. GO to php admin

2. click on the database that needs to be backed up.

3. Click on the part EXPORT

4. You will be presented with tow options.

	- Quick
	- Custom

5. Save.

*************************************************************************************


Part 3 and Part 4.


In git I had to create and switch a new branch. As well a creating this new branch in github using the following command.

git checkout -b Name_of_the_branch.

I also created the new file directory and the splitting the pag in parts adding the following code the index file.

<?php include '/core/init.php'; ?>

<?php include '/includes/overall/header.php'; ?>

    <h1>Home</h1>
    <p>Just a template</p>
    
<?php include '/includes/overall/footer.php'; ?>


The first include add the init file to the page which in addition to starting the session contains the connection to the database and to the users.php file which will contain many functions.

<?php

    session_start();

    // error_reporting(0);

    require 'database/connect.php';
    require 'functions/users.php';


?>

The code found in the connect.php file contains the following which enables the page to connect to the database.

<?php 

    $connection_error = 'Sorry we are experiencing some connection problems';

    // mysql_connect('localhost', 'root', '') or die(mysql_error());
    

    mysql_connect('localhost', 'root', '') or die($connection_error);
    mysql_select_db('forum') or die($connection_error);

?> 

**************************************************************************************************************************

In part 5, 6 and 7 I cover the login.

The login process start with the form in the aside widget found in includes/widgets/login.php like the code below.


<div class="widget">
    <h2>Log in</h2>
    <div class="inner">

        <form action="login.php" method="post">

            <ul id="login">

                <li>
                    Username:<br>
                    <input type="text" name="username">
                </li>

                <li>
                    Password:<br>
                    <input type="text" name="password">
                </li>

                <input type="submit" value="Log in"> <br><br>
                <a href="register.php">Register</a>

            </ul>
        </form>
    
    </div>

</div>

This form is posting to the login.php after the user fills out the form and click in the submit bottom. The login.php file found in the root directory
and it has the following code.

Steps done in the code below.

1- include the init.php file to start the session, connect to the database and have access to other functions.

<?php

    session_start();

    // error_reporting(0);

    require 'database/connect.php';
    require 'functions/general.php';
    require 'functions/users.php';

    $errors = array();

?>

2- include the header of the page.


    include 'includes/overall/header.php';


3- make sure the form is being submitted empty

4- create an errors array in the init.php file.

5- check if the user user_exists. This function live the following directory; 'core/functions/users.php'

    function user_exists($username){


        $username = sanitize($username);
        $query = mysql_query("SELECT COUNT(`user_id`) as `CountUser` FROM `users` WHERE `username` = '$username'");

        return (mysql_result($query, 0, 'CountUser') ==1) ? true : false;

    }



6- If the user exist check if the account is active using the user_active function which lives in the following directory 'core/functions/users.php'

    function user_active($username){

        $username = sanitize($username);

        $query = mysql_query("SELECT COUNT(`user_id`) as `CountUser` FROM `users` WHERE `username` = '$username' AND `active` =1");

        return (mysql_result($query, 0, 'CountUser') ==1) ? true : false; 
    }

7- login by setting the sessiong.

    To login the user we have to make sure user that the username and password match our records in the database.

    function user_id_from_username($username){

        $username = sanitize($username);

        $query = mysql_query("SELECT `user_id` FROM `users` WHERE `username`= '$username'");
        
        //What happens if the user id is not found?

        return mysql_result($query, 0, 'user_id');
    }

    function login($username, $password){

        $user_id = user_id_from_username($username);

        $username = sanitize($username);
        $password = md5(sanitize($password));

        $query = mysql_query("SELECT COUNT(`user_id`) FROM `users` WHERE `username` = '$username' AND `password`= '$password'");
        return (mysql_result($query, 0) ==1) ? $user_id : false;

    }

    if the login function returns true then we go ahead and set the session using the following code.

    $login = login($username, $password);

    if($login == false) {

        $errors[] = 'Username and password combination is incorrect!';

    }else {

        //Set the session

        //$_SESSION['user_id']= $login;
        //Re direct to the home page.

        $_SESSION['user_id'] = $login;

        header("Location: index.php");

        exit();
    }



8- print errors if there are any.

9- include the footer.

10- if there are no errors redirect to the home page in this case index.php.



<?php

    include 'core/init.php';

    include 'includes/overall/header.php';


   if (isset($_POST['username']) && isset($_POST['password']) &&   empty($_POST) ===false){

        $username = $_POST['username'];
        $password = $_POST['password'];

        if(empty($username) || empty($password)){

            $errors[] ='You need to enter a username and a password!';

        }else if (user_exists($username) === false){

            $errors[] ='We can\'t find that username. Have you registered?';
        }else if (user_active($username) === false){

            $errors[] = 'You need to activate your account!';
        } else {

            $login = login($username, $password);

            if($login == false) {

                $errors[] = 'Username and password combination is incorrect!';

            }else {

                //Set the session

                //$_SESSION['user_id']= $login;
                //Re direct to the home page.

                $_SESSION['user_id'] = $login;

                header("Location: index.php");

                exit();
            }
        }

   }

    print_r($errors);



   include 'includes/overall/footer.php';

?>

I also create the logout.php file to enable the user to be able to logout which has the following code.

<?php 

    session_start();
    session_destroy();

    header("Location: index.php");

?>


To make sure the to only show the login form when the user is not logged in the following code was added.

<aside>

    <?php

        if(logged_in()){

            echo 'Logged in!';
        }else{
            include '/includes/widgets/login.php';
        }
    
    ?>

</aside>

The code above uses the logged_in() function to check if the user is logged in. This function lives in the following directory.
'core/functions/users.php'


    function logged_in(){

        return (isset($_SESSION['user_id'])) ? true : false;
    }


****************************************************************************************************************************

Part 8. Error handling.


We created the print_out_errors which loops through the array of errors and returns an ul list of the errors.

    function print_out_errors($errors){

        return '<ul><li>'. implode('</li><li>', $errors). '</li></ul>';
    }

To convert the array values to a string I use the implode function.

In the login.php file I added the following code.


<?php 


    include 'core/init.php';


    ......................................
    ......................................
    ......................................
    ......................................


    include 'includes/overall/header.php';

    if (empty($errors) ===false) {
        

?>

        <h2>We tried to log you in but ......</h2>

<?php 


        echo print_out_errors($errors);

    }

   include 'includes/overall/footer.php';

?>


**********************************************************************************************************

Part 9 and Part 10.


The main goal here is to retreive the data of the user that started the session.

I created a $user_data variable in the init.php file. By creating the variable in this files, this variable can access anywhere in the site since this file almost added to every page in the site.

    if (logged_in() ===true) {
        $session_user_id = $_SESSION['user_id'];

        $user_data = user_data($session_user_id, 'user_id', 'username', 'password', 'first_name', 'last_name', 'email');

        // print_r($user_data);
    }


I only try to retreive the information of the user if the user is logged in.

I created a variable that is going to hold the data returned from the user_data function created in the user.php file in the following directory core/fucntions/users.php.


    function user_data($user_id){

        $data = array();
        $user_id = (int)$user_id;

        $func_num_args = func_num_args();

        $func_get_args = func_get_args();

        if ($func_num_args > 1) {
            unset($func_get_args[0]);

            $fields = '`'. implode('`, `', $func_get_args). '`';

            $query = mysql_query("SELECT $fields  FROM `users` WHERE `user_id` = '$user_id'");

            $data = mysql_fetch_assoc($query);

            return $data;
        }     

    }


I use the func_num_args to get the number of arguments passed. We use the user_id from the session to use it as a parameter in the query.

Here we use the func_get_args functions to save the arguments in a array.

I unset the user_id parameter from session and then use the implode function to convert the array to string that can used in the query for the columns that I need to retreive from the database.


The result from the query is converted into an associative array using the mysql_fetch_assoc function and the data is returned to the $user_data variable in the init.php file.


Steps.

1. Check if the user is logged in.

2. Grab the user_id from the session.

3. Get the number of arguments.

4. Get the array of arguments.

5. Convert the array of arguments to a string of columns.

6. Create the query using the user_id and the columns name we got from imploding or converting the arguments to a string.

7. Convert the result from the query to an associative array.

8. Return the data.

*******************************************************************************************************************************

Part 11 Disable banned user.

If a user's account is disable while the user surfing the site we need to log it out.

1. Check if the user's account is active using the user_active function we created before.


    function user_active($username){

        $username = sanitize($username);

        $query = mysql_query("SELECT COUNT(`user_id`) as `CountUser` FROM `users` WHERE `username` = '$username' AND `active` =1");

        return (mysql_result($query, 0, 'CountUser') ==1) ? true : false; 
    }


2. we add the following code to the unit.php file


    if (logged_in() ===true) {
        $session_user_id = $_SESSION['user_id'];

        $user_data = user_data($session_user_id, 'user_id', 'username', 'password', 'first_name', 'last_name', 'email');

        // print_r($user_data);

        if (user_active($user_data['username']) ===false) {
            session_destroy();
            header('Location: index.php');
            exit();
        }
    }

3. destroy the session using the following code.

session_destroy();

4. redirect to the home page.

header("Location: index.php");

5. exit the program.

exit();

*****************************************************************************************************************************


Part 12 Showing the user count.


We adding a new widget to show the user count in the aside.php file

<aside>

    <?php

        if(logged_in()){

            include '/includes/widgets/loggedin.php';
        }else{
            include '/includes/widgets/login.php';
        }

        include '/includes/widgets/user_count.php';
    
    ?>



</aside>


the user_count.php file in includes/widgets/ directory has the following code.



<div class="widget">
    <h2>Users</h2>
    <div class="inner">

        <?php 

            $user_count = user_count();
            $suffix = ($user_count !=1) ? 's': '';


        ?>

        We currently have <?php echo $user_count; ?> user<?php $suffix; ?>.
    
    </div>

</div>


I created the user_count function in the users.php file found in the core/functions/users.php file and it has the following code.

   function user_count(){

        return mysql_result(mysql_query("SELECT COUNT('user_id') FROM `users` WHERE `active` = 1"), 0);
    }

This function will return the count of the user_ids that active or otherwords that their active column has a value of 1.

********************************************************************************************************************

Part 13 and Part 14

When the user is not loggedin and need to register we show this code 

<aside>

    <?php

        if(logged_in()){

            include '/includes/widgets/loggedin.php';
        }else{
            include '/includes/widgets/login.php';
        }

        include '/includes/widgets/user_count.php';
    
    ?>



</aside>


In the login.php file we have the following code.

<div class="widget">
    <h2>Log in</h2>
    <div class="inner">

        <form action="login.php" method="post">

            <ul id="login">

                <li>
                    Username:<br>
                    <input type="text" name="username">
                </li>

                <li>
                    Password:<br>
                    <input type="text" name="password">
                </li>

                <input type="submit" value="Log in"> <br><br>
                <a href="register.php">Register</a>

            </ul>
        </form>
    
    </div>

</div>

On this part there is a link to the register.php file.


In part 13 we created the form in the register.php file


<form action="" method="POST">

    <ul class="form">
        
        <li>
            <label for="first_name">First name</label>
            <input type="text" name="first_name">
        </li>

        <li>
            <label for="last_name">Last name</label>
            <input type="text" name="last_name">
        </li>

        <li>
            <label for="email">Email</label>
            <input type="text" name="email">
        </li>

        <li>
            <label for="Username">Username</label>
            <input type="text" name="username">
        </li>

        <li>
            <label for="password">Password</label>
            <input type="password" name="password">
        </li>

        <li>
            <label for="repeat_name">Repeat password</label>
            <input type="password" name="repeat_password">
        </li>
        <li><input type="submit" value="register"></li>
    </ul>
    

</form>


In part 14 we created the following code in the register.php file


<?php include '/core/init.php'; ?>

<?php include '/includes/overall/header.php'; ?>

<?php 

    if(empty($_POST) ==false){

        // die($_POST);

        $required_fields = array('first_name', 'last_name', 'email', 'username', 'password');

        // echo '<pre>', print_r($_POST, true),'</pre>';

        //if the field's value is empty and is in the array of required fields then append to error.

        foreach ($_POST as $key => $value) {
            if (empty($value) && in_array($key, $required_fields) ==true ) {
                $errors[] = "The $key field is required";
            }
        }

        if (empty($errors)) {
            
            if (user_exists($_POST['username'])) {
                $errors[] = 'Sorry, The username \''.htmlentities($_POST['username']). '\' is already in use';
            }
        }

        
    }


    echo '<pre>', print_r($errors, true), '</pre>';


?>

The interesting part here is validating the required data.

we created an array of required fields and then using the foreach loop we iterate every element in the $_POST array and if the value is empty and is in the $required_fields array then is added to the $errors array.

functions used.

empty($value)

in_array($key, $requiered_fields)

**********************************************************************************************************************

In part 15 and part 16 we add the following code in the register.php file

        if (empty($errors)) {
            
            if (user_exists($_POST['username'])) {
                $errors[] = 'Sorry, The username \''.htmlentities($_POST['username']). '\' is already in use';
            }

            if (preg_match("/\\s/", $_POST['username']) == true) {

                $errors[] = 'Your username must not contain any spaces';
            }

            if (strlen($_POST['password']) < 6) {
                $errors[] = 'Your password is too short, Your password needs to be at least 6 characters long!';
            }

            if ($_POST['password'] !== $_POST['repeat_password']) {
                $errors[] = 'Your passwords do not match!, try again!';
            }

            if (filter_var($_POST['email'], FILTER_VALIDATE_EMAIL) ===false) {
                $errors[] = 'A valid email address is required';
            }

            if (email_exists($_POST['email'])) {
                $erros[] = 'Sorry, this email \''.$_POST['email'].'\' is already in use!';
            }
        }


The preg_match function is a php regular exprssion that checks if the username has spaces.

The filter_var function validates if email is valid email.

To check if the email is already being used we created the following functions in the users.php file in the functions folder.

   function email_exists($email){

        $email = sanitize($email);

        $query = mysql_query("SELECT COUNT(`user_id`) as `CountUser` FROM `users` WHERE `email` = '$email'");
        return (mysql_result($query, 0,'CountUser') ==1) ? true : false;
    }


**************************************************************************************************

In part 17, 18, and 19 we cover the form validation and user registration.


At the root directory we created a filed called register.php


<?php include '/core/init.php'; ?>

<?php include '/includes/overall/header.php'; ?>

<?php 

    if(empty($_POST) ==false){

        // die($_POST);

        $required_fields = array('first_name', 'last_name', 'email', 'username', 'password');

        // echo '<pre>', print_r($_POST, true),'</pre>';

        //if the field's value is empty and is in the array of required fields then append to error.

        foreach ($_POST as $key => $value) {
            if (empty($value) && in_array($key, $required_fields) ==true ) {
                $errors[] = "The $key field is required";
            }
        }

        if (empty($errors)) {
            
            if (user_exists($_POST['username'])) {
                $errors[] = 'Sorry, The username \''.htmlentities($_POST['username']). '\' is already in use';
            }

            if (preg_match("/\\s/", $_POST['username']) == true) {

                $errors[] = 'Your username must not contain any spaces';
            }

            if (strlen($_POST['password']) < 6) {
                $errors[] = 'Your password is too short, Your password needs to be at least 6 characters long!';
            }

            if ($_POST['password'] !== $_POST['repeat_password']) {
                $errors[] = 'Your passwords do not match!, try again!';
            }

            if (filter_var($_POST['email'], FILTER_VALIDATE_EMAIL) ===false) {
                $errors[] = 'A valid email address is required';
            }

            if (email_exists($_POST['email'])) {
                $erros[] = 'Sorry, this email \''.$_POST['email'].'\' is already in use!';
            }
        }

        
    }


    // echo '<pre>', print_r($errors, true), '</pre>';


?>

<?php

    if(isset($_GET['success']) && empty($_GET['success'])){

        echo 'You have been registered!';


    }else{
    
?>
    <h1>Register</h1>

    <?php 

        if (empty($_POST) ===false && empty($errors) ===true) {

            $register_data = array(

                "username" => $_POST['username'],
                "password" => $_POST['password'],
                "first_name" => $_POST['first_name'],
                "last_name" => $_POST['last_name'],
                "email" => $_POST['email']

            );

            // $register_data['password'] =md5($register_data['password']);

            register_user($register_data);

            header("Location: register.php?success");

            exit();
            
        }else {

            echo print_out_errors($errors);
        }


    ?>

    <form action="" method="POST">

        <ul class="form">
            
            <li>
                <label for="first_name">First name</label>
                <input type="text" name="first_name">
            </li>

            <li>
                <label for="last_name">Last name</label>
                <input type="text" name="last_name">
            </li>

            <li>
                <label for="email">Email</label>
                <input type="text" name="email">
            </li>

            <li>
                <label for="Username">Username</label>
                <input type="text" name="username">
            </li>

            <li>
                <label for="password">Password</label>
                <input type="password" name="password">
            </li>

            <li>
                <label for="repeat_name">Repeat password</label>
                <input type="password" name="repeat_password">
            </li>
            <li><input type="submit" value="register"></li>
        </ul>
        

    </form>
<?php

    }


?>




<?php include '/includes/overall/footer.php'; ?>



we created a function in the users.php file in the functions directory

    function register_user($register_data){

        array_walk($register_data, 'sanitize_user_data');

        $register_data['password'] =md5($register_data['password']);

        $keys = '`'. implode('`, `', array_keys($register_data)). '`'; 

        $values = "'". implode("', '", $register_data). "'";

        mysql_query("INSERT INTO `users` ($keys) VALUES ($values)");

        // print_r($values);

    }


we also created a function to sanitize the user date and we passed the argument as reference so it can be changed in the original array passed. As we can see no return is needed in this functions as the array is changed by passing the array as reference.


   function sanitize_user_data(&$item){

        $item = mysql_real_escape_string($item);
    }

if the user is registered succcessfully then the program is redirectusing the the header function to the same page with a get request with a success as parameter.


If the succes parameter is set to success then the user has been register.

then we exit the program using the exit() function.


If the page has a GET['success'] request that means the user has been registered if not we use the registration form

*************************************************************************************************
















